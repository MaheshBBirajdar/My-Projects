set cut_paste_input [stack 0]
version 9.0 v1
push $cut_paste_input
Write {
 channels rgba
 file_type exr
 autocrop true
 version 27
 name WritePath
 selected true
 xpos 125
 ypos -70
 addUserKnob {20 FilePathWriter l "File Path Writer"}
 addUserKnob {22 makepath l " Make File Path " -STARTLINE T "def PFW_buildPath():\n tnode=nuke.thisNode()\n newpath=tnode\['expFile'].value() \n if tnode\['pyLinkControl'].label() == \" Turn Link Control ON \":\n  print \" Turn Link Control ON \"\n  newpath=str.replace(newpath,'\{rootPath\}',tnode\['rootPath'].value())\n  newpath=str.replace(newpath,'\{shot\}',tnode\['shot'].value())\n  newpath=str.replace(newpath,'\{folder\}',tnode\['folder'].value())\n  newpath=str.replace(newpath,'\{description\}',tnode\['description'].value())\n  newpath=str.replace(newpath,'\{size.w\}',str(int(tnode\['size'].value()\[0])))\n  newpath=str.replace(newpath,'\{size.h\}',str(int(tnode\['size'].value()\[1])))\n  newpath=str.replace(newpath,'\{type\}',tnode\['type'].value())\n  newpath=str.replace(newpath,'\{file_type\}',tnode\['file_type'].value())\n  newpath=str.replace(newpath,'\{ver\}',tnode\['ver'].value())\n  PFW_makePath(newpath)\n else:\n  print \" Turn Link Control OFF \"\n  if nuke.exists(tnode\['link'].value()):\n   lNode=nuke.toNode(tnode\['link'].value())\n   print lNode\['ver'].value()\n   newpath=str.replace(newpath,'\{rootPath\}',lNode\['rootPath'].value())\n   newpath=str.replace(newpath,'\{shot\}',lNode\['shot'].value())\n   newpath=str.replace(newpath,'\{folder\}',lNode\['folder'].value())\n   newpath=str.replace(newpath,'\{description\}',tnode\['description'].value())\n   newpath=str.replace(newpath,'\{ver\}',lNode\['ver'].value())\n   newpath=str.replace(newpath,'\{size.w\}',str(int(lNode\['size'].value()\[0])))\n   newpath=str.replace(newpath,'\{size.h\}',str(int(lNode\['size'].value()\[1])))\n   newpath=str.replace(newpath,'\{type\}',lNode\['type'].value())\n   newpath=str.replace(newpath,'\{file_type\}',lNode\['file_type'].value())\n   PFW_makePath(newpath)\n  else:\n   nuke.message('errr. link node does not Exist: '+tnode\['link'].value())\n\n\ndef PFW_makePath(newpath):\n tnode=nuke.thisNode()\n writePath=os.path.split(newpath)\n if nuke.ask('Do you want to make this path on disk? '+writePath\[0]+\"/\"+'\\n\\n'+'Do you want to make this file? '+'\\n'+writePath\[1]):\n   if not os.path.exists(writePath\[0]):\n     os.makedirs(writePath\[0])\n     tnode\['file'].setValue(newpath)\n   else:\n     if nuke.ask('errr. Directory already exists:\\n%s' % (writePath\[0])+'\\n\\n'+\"Do you want to set the file path in this node\"):\n      tnode\['file'].setValue(newpath)\n\n\nPFW_buildPath()"}
 addUserKnob {22 makeProxyPath l " Make Proxy Path " -STARTLINE T "def PFW_buildPath():\n tnode=nuke.thisNode()\n newpath=tnode\['expFile'].value() \n if tnode\['pyLinkControl'].label() == \" Turn Link Control ON \":\n  print \" Turn Link Control ON \"\n  newpath=str.replace(newpath,'\{rootPath\}',tnode\['rootPath'].value())\n  newpath=str.replace(newpath,'\{shot\}',tnode\['shot'].value())\n  newpath=str.replace(newpath,'\{folder\}',tnode\['folder'].value())\n  newpath=str.replace(newpath,'\{description\}',tnode\['description'].value())\n  newpath=str.replace(newpath,'\{size.w\}',str(int(tnode\['size'].value()\[0]/2)))\n  newpath=str.replace(newpath,'\{size.h\}',str(int(tnode\['size'].value()\[1]/2)))\n  newpath=str.replace(newpath,'\{type\}',tnode\['type'].value())\n  newpath=str.replace(newpath,'\{file_type\}',tnode\['file_type'].value())\n  newpath=str.replace(newpath,'\{ver\}',tnode\['ver'].value())\n  PFW_makePath(newpath)\n else:\n  print \" Turn Link Control OFF \"\n  if nuke.exists(tnode\['link'].value()):\n   lNode=nuke.toNode(tnode\['link'].value())\n   print lNode\['ver'].value()\n   newpath=str.replace(newpath,'\{rootPath\}',lNode\['rootPath'].value())\n   newpath=str.replace(newpath,'\{shot\}',lNode\['shot'].value())\n   newpath=str.replace(newpath,'\{folder\}',lNode\['folder'].value())\n   newpath=str.replace(newpath,'\{description\}',tnode\['description'].value())\n   newpath=str.replace(newpath,'\{ver\}',lNode\['ver'].value())\n   newpath=str.replace(newpath,'\{size.w\}',str(int(lNode\['size'].value()\[0]/2)))\n   newpath=str.replace(newpath,'\{size.h\}',str(int(lNode\['size'].value()\[1]/2)))\n   newpath=str.replace(newpath,'\{type\}',lNode\['type'].value())\n   newpath=str.replace(newpath,'\{file_type\}',lNode\['file_type'].value())\n   PFW_makePath(newpath)\n  else:\n   nuke.message('errr. link node does not Exist: '+tnode\['link'].value())\n\n\ndef PFW_makePath(newpath):\n tnode=nuke.thisNode()\n writePath=os.path.split(newpath)\n if nuke.ask('Do you want to make this path on disk? '+writePath\[0]+\"/\"+'\\n\\n'+'Do you want to make this file? '+'\\n'+writePath\[1]):\n   if not os.path.exists(writePath\[0]):\n     os.makedirs(writePath\[0])\n     tnode\['proxy'].setValue(newpath)\n   else:\n     if nuke.ask('errr. Directory already exists:\\n%s' % (writePath\[0])+'\\n\\n'+\"Do you want to set the file path in this node\"):\n      tnode\['file'].setValue(newpath)\n\n\nPFW_buildPath()"}
 addUserKnob {22 makeread l "  Make Read  " -STARTLINE T "import glob \nimport os \nimport re \nimport nukescripts \n\nnode=nuke.createNode( \"Read\" )\ntNode=nuke.thisNode()\n\nnode\['xpos'].setValue(tNode\['xpos'].value())\nnode\['ypos'].setValue(tNode\['ypos'].value()+55)\n\n\nrFile=tNode\['file'].value()\nrFileProxy=tNode\['proxy'].value()\n\n\npadRE = re.compile('%0(\\d+)d') \npadMatch = padRE.search(rFile) \npadMatchProxy = padRE.search(rFileProxy) \n\n\nif padMatch: \n padSize = int(padMatch.group(1)) \n frameList = sorted(glob.iglob(padRE.sub('\[0-9]' * padSize, rFile))) \n first = os.path.splitext(frameList\[0])\[0]\[-padSize:] \n last = os.path.splitext(frameList\[-1])\[0]\[-padSize:]\n node\['file'].fromUserText('%s %s-%s' % (rFile, first, last)) \n\nif padMatchProxy: \n padSize = int(padMatch.group(1)) \n frameList = sorted(glob.iglob(padRE.sub('\[0-9]' * padSize, rFileProxy))) \n first = os.path.splitext(frameList\[0])\[0]\[-padSize:] \n last = os.path.splitext(frameList\[-1])\[0]\[-padSize:]\n node\['proxy'].fromUserText('%s %s-%s' % (rFileProxy, first, last)) \n\n\n"}
 addUserKnob {22 pyDisableOtherWriteNodes l " Disable other write nodes " T "tnode=nuke.thisNode()\n\nfor s in nuke.allNodes():\n classTypes = \['Write' ]     \n for n in classTypes:         \n  if n in s.Class():           \n   s\['disable'].setValue(1)\ntnode\['disable'].setValue(0)" +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {22 pyLinkControl l " Turn Link Control ON " t "Automate this write node to be parented to a' File Path Writer nod'e so all the file path elements apart from discription can be controled from one node. i.e. quickly set up several precomp write nodes that can be versioned up together quickly" T "tnode=nuke.thisNode()\nif tnode\['pyLinkControl'].label() == ' Turn Link Control ON ':\n tnode\['pyLinkControl'].setLabel(\" Turn Link Control OFF \" )\n tnode\['rootPath'].setVisible(False) \n tnode\['shot'].setVisible(False) \n tnode\['folder'].setVisible(False) \n #tnode\['description'].setVisible(False) \n tnode\['size'].setVisible(False) \n tnode\['ver'].setVisible(False) \n tnode\['type'].setVisible(False) \n tnode\['text1'].setVisible(False) \n tnode\['text2'].setVisible(False) \n tnode\['link'].setVisible(True) \nelse:\n tnode\['pyLinkControl'].setLabel(\" Turn Link Control ON \")\n tnode\['rootPath'].setVisible(True) \n tnode\['shot'].setVisible(True) \n tnode\['folder'].setVisible(True) \n #tnode\['description'].setVisible(True) \n tnode\['size'].setVisible(True) \n tnode\['ver'].setVisible(True) \n tnode\['type'].setVisible(True) \n tnode\['text1'].setVisible(True) \n tnode\['text2'].setVisible(True) \n tnode\['link'].setVisible(False) \n" +STARTLINE}
 addUserKnob {1 link l "  link" t "this is the name of the node that is the parent" -STARTLINE +HIDDEN}
 link Write1
 addUserKnob {1 rootPath}
 addUserKnob {4 shot M {shot00Generic shot01 shot02 shot03 shot04 shot05 shot06 shot07 shot08 shot09 shot010}}
 addUserKnob {4 folder l subfolder M {renders_out renders_test renders_elements "" ""}}
 folder renders_elements
 addUserKnob {1 type}
 type cleanUp
 addUserKnob {1 description}
 description facePaint
 addUserKnob {1 ver}
 ver 01
 addUserKnob {14 size R 0 100}
 size {1920 1080}
 addUserKnob {26 text1 l " " -STARTLINE T "  -this is only for the folder name"}
 addUserKnob {26 text2 l "file type" T ":defined on 'Write' tab dropdown"}
 addUserKnob {26 ""}
 addUserKnob {20 settings n 1}
 settings 0
 addUserKnob {1 expFile l "file expression"}
 expFile "\{rootPath\}/\{shot\}/\{folder\}/\{type\}_\{description\}_\{ver\}/\{size.w\}x\{size.h\}/\{shot\}_\{type\}_\{description\}_v\{ver\}.%04d.\{file_type\}"
 addUserKnob {20 endGroup n -1}
 addUserKnob {26 todo l "" -STARTLINE T "TODO:\n-do proxy from root (at the moment it is half)\n-auto name from script name option version/name control\n-render proxy from main button\n-fix make read when proxy missing\n-add viewable link for link control\n"}
 addUserKnob {20 Info}
 addUserKnob {22 documentation l " Documentation / Feedback " T "import webbrowser\nwebbrowser.open(\"http://opennuke.github.io/filePathWrite_nk/\")" +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {26 version_1 l version T "0.1 BETA"}
 addUserKnob {26 created l created: T "1/1/2015 by <a href=\\'http://movingimagearts.com'> Rafal Kaniewski</a>"}
 addUserKnob {26 modified l "modified: " T " "}
 addUserKnob {26 source l source: T "<a href='https://github.com/openNuke/toolset/blob/master/setBlacks.nk'> Github.com</a>"}
 addUserKnob {26 licence l licence: T "<a href=\"https://github.com/openNuke/toolset/blob/master/LICENCE\">READ ME</a>"}
}
