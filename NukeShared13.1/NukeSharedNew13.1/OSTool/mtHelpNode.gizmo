NoOp {
 name mtHelpNode
 tile_color 0xffbf00ff
 gl_color 0xffffffff
 label (*.*)
 note_font "Verdana Bold"
 note_font_size 16
 note_font_color 0xff
 selected true
 xpos 1900
 ypos 164
 hide_input true
 addUserKnob {20 Disabler}
 addUserKnob {6 gui l "On User Interface Only (GUI)" +STARTLINE}
 gui true
 addUserKnob {26 space1 l "   " T "   "}
 addUserKnob {22 zdefocus l "<font color='light yellow'>Disable ZDef</font>" T "x = nuke.thisNode()\ngui = x.knob('gui').value()\nfor i in nuke.allNodes('ZDefocus2'):\n\n\tif gui == 1:\n\t\ti.knob('disable').setExpression('\$gui')\n\t\ti.knob('label').setValue('GUI DISABLED')\n\telse:\n\t\ti.knob('disable').setValue(1)" +STARTLINE}
 addUserKnob {22 Defocus l "<font color='orange'>Disable Defocus</font>" t "<font color='yellow'></font>" -STARTLINE T "x = nuke.thisNode()\ngui = x.knob('gui').value()\nfor i in nuke.allNodes('Defocus'):\n\n\tif gui == 1:\n\t\ti.knob('disable').setExpression('\$gui')\n\t\ti.knob('label').setValue('GUI DISABLED')\n\telse:\n\t\ti.knob('disable').setValue(1)"}
 addUserKnob {22 MotionBlur l "<font color='brown'>Disable Motion</font>" -STARTLINE T "x = nuke.thisNode()\ngui = x.knob('gui').value()\nfor i in nuke.allNodes('MotionBlur'):\n\n\tif gui == 1:\n\t\ti.knob('disable').setExpression('\$gui')\n\t\ti.knob('label').setValue('GUI DISABLED')\n\telse:\n\t\ti.knob('disable').setValue(1)"}
 addUserKnob {22 Denoise l "<font color='yellow'>Disable Denoise</font>" -STARTLINE T "x = nuke.thisNode()\ngui = x.knob('gui').value()\nfor i in nuke.allNodes('Denoise2'):\n\n\tif gui == 1:\n\t\ti.knob('disable').setExpression('\$gui')\n\t\ti.knob('label').setValue('GUI DISABLED')\n\telse:\n\t\ti.knob('disable').setValue(1)"}
 addUserKnob {22 python_button_2 l "<font color='light yellow'>Enable ZDef</font>" T "for i in nuke.allNodes('ZDefocus2'):\n\tx = i.knob('disable').value()\n\tif x == 1:\n\t\ti.knob('disable').clearAnimated()\n\t\ti.knob('disable').setValue(0)\n\t\tif i.knob('label').value() == 'GUI DISABLED':\n\t\t\ti.knob('label').setValue('')\n\t\telse:\n\t\t\tpass\n\telse:\n\t\tcontinue" +STARTLINE}
 addUserKnob {22 python_button_3 l "<font color='orange'>Enable Defocus</font>" -STARTLINE T "for i in nuke.allNodes('Defocus'):\n\tx = i.knob('disable').value()\n\tif x == 1:\n\t\ti.knob('disable').clearAnimated()\n\t\ti.knob('disable').setValue(0)\n\t\tif i.knob('label').value() == 'GUI DISABLED':\n\t\t\ti.knob('label').setValue('')\n\t\telse:\n\t\t\tpass\n\telse:\n\t\tcontinue"}
 addUserKnob {22 python_button_4 l "<font color='brown'>Enable Motion</font>" -STARTLINE T "for i in nuke.allNodes('MotionBlur'):\n\tx = i.knob('disable').value()\n\tif x == 1:\n\t\ti.knob('disable').clearAnimated()\n\t\ti.knob('disable').setValue(0)\n\t\tif i.knob('label').value() == 'GUI DISABLED':\n\t\t\ti.knob('label').setValue('')\n\t\telse:\n\t\t\tpass\n\telse:\n\t\tcontinue"}
 addUserKnob {22 python_button_5 l "<font color='yellow'>Enable Denoise</font>" -STARTLINE T "for i in nuke.allNodes('Denoise2'):\n\tx = i.knob('disable').value()\n\tif x == 1:\n\t\ti.knob('disable').clearAnimated()\n\t\ti.knob('disable').setValue(0)\n\t\tif i.knob('label').value() == 'GUI DISABLED':\n\t\t\ti.knob('label').setValue('')\n\t\telse:\n\t\t\tpass\n\telse:\n\t\tcontinue"}
 addUserKnob {26 space2 l "   " T "   "}
 addUserKnob {1 NodesToDisable l "Custom Class"}
 addUserKnob {22 DisableCustom l "<font color='light blue'>Disable Custom Class</font>" T "x = nuke.selectedNode()\ngui = x.knob('gui').value()\n\nclassString = x.knob('NodesToDisable').value()\nclassList = classString.split(\", \")\n\n\nfor classNode in classList:\n\n    try:\n        for i in nuke.allNodes(classNode):\n\n            if gui == 1:\n                i.knob('disable').setExpression('\$gui')\n                i.knob('label').setValue('GUI DISABLED')\n            else:\n                i.knob('disable').setValue(1)\n    except:\n        raise \n        continue" +STARTLINE}
 addUserKnob {22 enableCustom l "<font color='light blue'>Enable Custom Class</font>" T "x = nuke.thisNode()\ngui = x.knob('gui').value()\n\nclassString = x.knob('NodesToDisable').value()\nclassList = classString.split(\", \")\n\n\nfor classNode in classList:\n\n\ttry:\n\t\tfor i in nuke.allNodes(classNode):\n\t\t\tx = i.knob('disable').value()\n\t\t\tif x == 1:\n\t\t\t\ti.knob('disable').clearAnimated()\n\t\t\t\ti.knob('disable').setValue(0)\n\t\t\t\tif i.knob('label').value() == 'GUI DISABLED':\n\t\t\t\t\ti.knob('label').setValue('')\n\t\t\t\telse:\n\t\t\t\t\tpass\n\t\t\telse:\n\t\t\t\tcontinue\n\n\texcept:\n\t\tcontinue" +STARTLINE}
 addUserKnob {26 ""}
 addUserKnob {22 guiAdvert l "<font color='light green'>Create/Remove Label On GUI disabled nodes</font>" -STARTLINE T "for i in nuke.allNodes():\n\tfor knob in i.allKnobs():\n\t    if knob.hasExpression():\n\t        for anim in knob.animations():\n\t            expr = anim.expression()\n\t            if expr == \"\$gui\":\n\t            \tif i.knob('label').value() != 'GUI DISABLED':  \n\t            \t\ti.knob('label').setValue('GUI DISABLED')\n\t            \telse:\n\t            \t\ti.knob('label').setValue('')"}
 addUserKnob {22 remove l "Remove all GUI disables" -STARTLINE T "for i in nuke.allNodes():\n\tfor knob in i.allKnobs():\n\t    if knob.hasExpression():\n\t        for anim in knob.animations():\n\t            expr = anim.expression()\n\t            if expr == \"\$gui\":\n\t            \tknob.clearAnimated()\n\t            \tknob.setValue(0)"}
 addUserKnob {20 CheckingAndFixing l "Check / Fix"}
 addUserKnob {22 checkMissingFrames l "<font color='light blue'>Check Read Missing Frames</font>" T "import os, sys, shutil\n\np = nuke.Panel('Missing Frames')\n\np.addEnumerationPulldown('Frame Range', 'Read Project Custom')\n\np.addSingleLineInput('Custom First', 1001)\np.addSingleLineInput('Custom Last', 1100)\n \ntry:\n    readNode = nuke.selectedNode()\n    readFile = readNode.knob('file').value()\n    readFilePath = os.path.dirname(readFile)\n    readBaseName = os.path.basename(readFile)\n    nameExtension = os.path.splitext(readBaseName)\n    filename = nameExtension\[0]\n    fileExtension = nameExtension\[1]\n\n    if os.path.isabs(readFile) == False:\n\n        myProjectRoot = nuke.root().knob('name').value()\n        myRoot = os.path.dirname(myProjectRoot)\n        readFile = myRoot + \"/\" + readFile\n        readFilePath = os.path.dirname(readFile)\n        readBaseName = os.path.basename(readFile)\n        nameExtension = os.path.splitext(readBaseName)\n        filename = nameExtension\[0]\n        fileExtension = nameExtension\[1]\n\n    if p.show() == True:\n\n        numberOfMissingFrames = 0\n        missingFrames = \[]\n\n        frOption = p.value('Frame Range')\n\n        customFirst = p.value('Custom First')\n        customLast = p.value('Custom Last')\n\n        if frOption == 'Read':\n\n            firsFrame = readNode.knob('first').value()\n            lastFrame = readNode.knob('last').value()\n\n        elif frOption == 'Project':\n\n            firstFrame = nuke.root()\['first_frame'].value()\n            lastFrame = nuke.root()\['last_frame'].value() \n            \n        elif frOption == 'Custom':\n\n            firstFrame = customFirst\n            lastFrame = customLast\n\n        else:\n\n            firstFrame = 1001\n            lastFrame = 1001\n\n\n        seqList = \[\".exr\", \".dpx\", \".jpg\", \".png\", \".tiff\", \".targa\", \".jpeg\"]\n\n\n        if filename.find(str(\"%d\")) != -1 or  filename.find(str(\"%04d\")) != -1 or filename.find(str(\"%05d\")) != -1 or filename.find(str(\"%06d\")) != -1 or filename.find(str(\"%07d\")) != -1 or filename.find(str(\"####\")) != -1:\n\n            if fileExtension in seqList:\n\n                print 'check 1'\n                for e in range(int(firstFrame), (int(lastFrame)+1)):\n\n                    if filename.find(str(\"%04d\")) != -1:\n                        try:\n                            readBaseNameFraming = readBaseName.replace(\"%04d\", str(e))\n                        except:\n                            pass\n\n                    elif filename.find(str(\"%d\")) != -1:\n                        try:\n                            readBaseNameFraming = readBaseName.replace(\"%d\", str(e))\n                        except:\n                            pass\n\n                    elif filename.find(str(\"%05d\")) != -1:\n                        try:\n                            readBaseNameFraming = readBaseName.replace(\"%05d\", str(e))\n                        except:\n                            pass\n                    elif filename.find(str(\"%06d\")) != -1:\n                        try:\n                            readBaseNameFraming = readBaseName.replace(\"%06d\", str(e))\n                        except:\n                            pass\n\n                    elif filename.find(str(\"%07d\")) != -1:\n                        try:\n                            readBaseNameFraming = readBaseName.replace(\"%06d\", str(e))\n                        except:\n                            pass\n\n                    elif filename.find(str(\"####\")) != -1:\n                        try:\n                            readBaseNameFraming = readBaseName.replace(\"####\", str(e))\n                        except:\n                            pass\n                    else:\n                        pass\n\n\n                    fileToSearch = str(readFilePath) +\"/\"+ str(readBaseNameFraming)\n                    print fileToSearch\n                    try: \n                        if os.path.isfile(fileToSearch):\n                            print 'everything good'\n                            pass\n                        else:\n                            print 'woops, frame missing'\n                            numberOfMissingFrames = numberOfMissingFrames + 1\n                            missingFrames.append(e)\n                    except:\n                        print 'algo ha pasao'\n                        continue\n        else:\n            pass\n        nuke.message('The following frames are missing: \{\} \\n \\nThat makes a total of \"\{\}\" frames missing.'.format(missingFrames, numberOfMissingFrames))\n\n\n    else:\n        pass\nexcept:\n    nuke.message ('You must have selected a Read Node') " +STARTLINE}
 addUserKnob {26 text_1 l "" -STARTLINE T "It doesn't accept multiselection"}
 addUserKnob {26 text_2 l "   " T "   "}
 addUserKnob {22 python_button_7 l "<font color='light green'>Set Read First Frame to Project</font>" T "rootFirst = int(nuke.root()\['first_frame'].value())\nprint rootFirst\nfor i in nuke.selectedNodes('Read'):\n    i.knob('selected').setValue(True)\n    x = nuke.createNode('TimeClip', inpanel = False)\n    x.knob('frame_mode').setValue('start at')\n    x.knob('frame').setValue(str(rootFirst))" +STARTLINE}
 addUserKnob {26 space3 l "   " T "   "}
 addUserKnob {26 ""}
 addUserKnob {6 AllReads l "All Reads" t "If All Reads is select, It will apply those changes to all reads, If Not, It will only apply the changes to teh selected Reads." +STARTLINE}
 addUserKnob {22 setBlack l "<font color='red'>Set \"Black\" On Error</font>" T "x = nuke.thisNode()\nAllReads = x.knob('AllReads').value()\ntry: \n\tif AllReads == 1:\n\t    for i in nuke.allNodes('Read'):\n\t        \n\t        i.knob('on_error').setValue(1)\n\telse:\n\t    y = nuke.selectedNodes()\n\t    for i in y:\n\t        i.knob('on_error').setValue(1)\nexcept:\n\tpass" +STARTLINE}
 addUserKnob {22 SetColorSpace l "<font color='orange'>Set Reads Color Space to project</font>" t "Set Target Reads to the projects color space\n\n" T "x = nuke.thisNode()\nAllReads = x.knob('AllReads').value()\nRootColor = nuke.root()\['workingSpaceLUT'].value()\ntry: \n\tif AllReads == 1:\n\t    for i in nuke.allNodes('Read'):\n\t        \n\t        i.knob('colorspace').setValue(RootColor)\n\telse:\n\t    y = nuke.selectedNodes()\n\t    for i in y:\n\t        i.knob('colorspace').setValue(RootColor)\nexcept:\n\tpass" +STARTLINE}
 addUserKnob {22 python_button_6 l "<font color='orange'>Set Reads Color Space to Default</font>" T "x = nuke.thisNode()\nAllReads = x.knob('AllReads').value()\nRootColor = nuke.root()\['workingSpaceLUT'].value()\ntry: \n\tif AllReads == 1:\n\t    for i in nuke.allNodes('Read'):\n\t        \n\t        i.knob('colorspace').setValue(0)\n\telse:\n\t    y = nuke.selectedNodes()\n\t    for i in y:\n\t        i.knob('colorspace').setValue(0)\nexcept:\n\tpass" +STARTLINE}
 addUserKnob {20 tab l "Label / Tile"}
 addUserKnob {1 string l "Node Class"}
 addUserKnob {26 text l "   " T "If no node Class is specified, It will apply the changes to the selected nodes."}
 addUserKnob {26 ""}
 addUserKnob {1 string_1 l "Label Input"}
 addUserKnob {6 boolean l Bold +STARTLINE}
 addUserKnob {6 boolean_1 l Italic -STARTLINE}
 addUserKnob {3 integer l size -STARTLINE}
 integer 11
 addUserKnob {22 python_button l "Change Label" T "\nx = nuke.toNode('mtHelpNode')\nNodeClassLabel = x.knob('string').value()\nNodeClassLabelList = NodeClassLabel.split(\", \")\nlabelInput = x.knob('string_1').value()\nlabelSize = x.knob('integer').value()\nlabelBold = x.knob('boolean').value()\nlabelItalic =  x.knob('boolean_1').value()\n\n\nif NodeClassLabel == \"\" or NodeClassLabel == \" \" or NodeClassLabel == \",\" or NodeClassLabel == \", \":\n    y = nuke.selectedNodes()\n    for i in y:\n        \n        i.knob('label').setValue(labelInput)\n        i.knob('note_font_size').setValue(labelSize)\n        if labelBold == 1 and labelItalic == 1:\n        \ti.knob('note_font').setValue('Verdana bold italic')\n        elif labelBold == 1 and labelItalic == 0:\n            i.knob('note_font').setValue('Verdana bold')\n        elif labelBold == 0 and labelItalic == 1:\n\t\t\ti.knob('note_font').setValue('Verdana italic')\n        else:\n\t\t\ti.knob('note_font').setValue('Verdana')\n\nelse:\n    for i in NodeClassLabelList:\n        for e in nuke.allNodes(i):\n\t        e.knob('label').setValue(labelInput)\n\t        e.knob('note_font_size').setValue(labelSize)\n\t        if labelBold == 1 and labelItalic == 1:\n\t        \te.knob('note_font').setValue('Verdana bold italic')\n\t        elif labelBold == 1 and labelItalic == 0:\n\t            e.knob('note_font').setValue('Verdana bold')\n\t        elif labelBold == 0 and labelItalic == 1:\n\t\t\t\te.knob('note_font').setValue('Verdana italic')\n\t        else:\n\t\t\t\te.knob('note_font').setValue('Verdana')\n\n" +STARTLINE}
 addUserKnob {26 space5 l "   " T "    "}
 addUserKnob {18 color_rgb}
 color_rgb {0 0 0}
 addUserKnob {6 color_rgb_panelDropped l "panel dropped state" -STARTLINE +HIDDEN}
 addUserKnob {22 python_button_1 l "Change Tile Color" T "x = nuke.toNode('mtHelpNode')\nNodeClassLabel = x.knob('string').value()\nNodeClassLabelList = NodeClassLabel.split(\", \")\ncolorTarget = x.knob('color_rgb').value()\nprint colorTarget\n\ntry:\n\tredC = colorTarget\[0]\n\tgreenC = colorTarget\[1]\n\tblueC = colorTarget\[2]\n\n\tprint redC\n\tprint greenC\n\tprint blueC\n\tB_Color = int('%02x%02x%02x%02x' % (redC*255,greenC*255,blueC*255,1),16)\nexcept:\n\n\tB_Color = int('%02x%02x%02x%02x' % (colorTarget*255,colorTarget*255,colorTarget*255,1),16)\t\n\n\nif NodeClassLabel == \"\" or NodeClassLabel == \" \" or NodeClassLabel == \",\" or NodeClassLabel == \", \":\n    y = nuke.selectedNodes()\n    for i in y:\n        \n        \ti.knob('tile_color').setValue(B_Color)\n\n\nelse:\n    for i in NodeClassLabelList:\n        for e in nuke.allNodes(i):\n        \n        \te.knob('tile_color').setValue(B_Color)" +STARTLINE}
}
